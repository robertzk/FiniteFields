/* Generated by Opal 0.4.4 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $range = $opal.range, $gvars = $opal.gvars;
  $opal.add_stubs(['$attr_accessor', '$simplify!', '$each', '$==', '$value', '$-', '$each_with_index', '$+', '$%', '$*', '$**', '$map!', '$>', '$length', '$[]', '$shift', '$degree', '$prime', '$join', '$compact', '$map', '$===', '$to_string', '$is_a?', '$[]=', '$new', '$class', '$raise', '$<=', '$count', '$select', '$coefficients', '$max', '$concat', '$-@', '$nil?', '$puts', '$construct_irreducible_polynomial', '$to_s', '$exponent', '$polynomial', '$open', '$default_poly', '$gsub', '$lambda', '$call', '$all_elements', '$<<', '$close', '$protected', '$/', '$floor', '$reverse', '$is_irreducible', '$finite_field', '$coefficients=', '$last', '$>=', '$inverse_in_prime_field', '$sanity_check', '$to_ffp', '$inverse', '$<', '$dup', '$send', '$integer_wrap', '$method_defined?', '$alias_method']);
  (function($base, $super) {
    function FiniteFieldPolynomial(){};
    var self = FiniteFieldPolynomial = $klass($base, $super, 'FiniteFieldPolynomial', FiniteFieldPolynomial);

    var def = FiniteFieldPolynomial._proto, $scope = FiniteFieldPolynomial._scope;
    def.prime = def.coefficients = nil;
    self.$attr_accessor("prime", "coefficients", "degree");

    def.$initialize = function(prime, _coefficients) {
      var self = this;
      _coefficients = $slice.call(arguments, 1);
      self.prime = prime;
      self.coefficients = _coefficients;
      return self['$simplify!']();
    };

    def.$is_irreducible = function() {try {

      var TMP_1, $a, $b, self = this;
      ($a = ($b = ($range(0, (self.prime['$-'](1)), false))).$each, $a._p = (TMP_1 = function(x) {var self = TMP_1._s || this;if (x == null) x = nil;
        if (self.$value(x)['$=='](0)) {
          $opal.$return(false)
          } else {
          return nil
        }}, TMP_1._s = self, TMP_1), $a).call($b);
      return true;
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    };

    def.$value = function(x) {
      var TMP_2, $a, $b, self = this, val = nil;
      val = 0;
      ($a = ($b = self.coefficients).$each_with_index, $a._p = (TMP_2 = function(c, i) {var self = TMP_2._s || this, deg = nil;
        if (self.degree == null) self.degree = nil;
        if (self.prime == null) self.prime = nil;
if (c == null) c = nil;if (i == null) i = nil;
        deg = self.degree['$-'](i);
        return val = val['$+'](c['$*']((x['$**'](deg)))['$%'](self.prime));}, TMP_2._s = self, TMP_2), $a).call($b);
      return val['$%'](self.prime);
    };

    def['$simplify!'] = function() {
      var TMP_3, $a, $b, $c, $d, self = this;
      ($a = ($b = self.coefficients)['$map!'], $a._p = (TMP_3 = function(coeff) {var self = TMP_3._s || this;
        if (self.prime == null) self.prime = nil;
if (coeff == null) coeff = nil;
        return coeff['$%'](self.prime)}, TMP_3._s = self, TMP_3), $a).call($b);
      while (($c = (($d = self.coefficients.$length()['$>'](1)) ? self.coefficients['$[]'](0)['$=='](0) : $d)) !== false && $c !== nil) {
      self.coefficients.$shift()};
      self.degree = self.coefficients.$length()['$-'](1);
      return self;
    };

    def.$to_string = function(raw) {
      var $a, $b, TMP_4, self = this;
      if (raw == null) {
        raw = false
      }
      return ((function() {if (($a = ($b = raw, ($b === nil || $b === false))) !== false && $a !== nil) {
        return "Polynomial of degree " + (self.$degree()) + " mod " + (self.$prime()) + ": "
        } else {
        return ""
      }; return nil; })())['$+'](($a = ($b = self.coefficients.$each_with_index()).$map, $a._p = (TMP_4 = function(c, i) {var self = TMP_4._s || this, $a, $b, deg = nil, monomial = nil, $case = nil;
        if (self.degree == null) self.degree = nil;
        if (self.coefficients == null) self.coefficients = nil;
if (c == null) c = nil;if (i == null) i = nil;
        deg = self.degree['$-'](i);
        monomial = (function() {$case = deg;if ((0)['$===']($case)) {return ""}else if ((1)['$===']($case)) {return "x"}else {return "x^" + (deg)}})();
        if (($a = (($b = c['$=='](0)) ? self.coefficients.$length()['$>'](1) : $b)) !== false && $a !== nil) {
          return nil
          } else {
          return "" + ((function() {if (($a = (($b = c['$=='](1)) ? deg['$>'](0) : $b)) !== false && $a !== nil) {
            return ""
            } else {
            return c
          }; return nil; })()) + (monomial)
        };}, TMP_4._s = self, TMP_4), $a).call($b).$compact().$join(" + "));
    };

    def.$to_s = function(args) {
      var $a, self = this;
      args = $slice.call(arguments, 0);
      return ($a = self).$to_string.apply($a, [].concat(args));
    };

    def['$*'] = function(y) {
      var $a, TMP_5, $b, $c, TMP_6, TMP_7, $d, TMP_8, $e, $f, self = this, coeffs = nil, tmp = nil, non_zero_index = nil, multiplied_coeffs = nil, new_coefficients = nil, poly = nil;
      if (($a = y['$is_a?']($scope.Integer)) !== false && $a !== nil) {
        coeffs = ($a = ($b = self.coefficients).$map, $a._p = (TMP_5 = function(c) {var self = TMP_5._s || this;if (c == null) c = nil;
          return 0}, TMP_5._s = self, TMP_5), $a).call($b);
        coeffs['$[]='](coeffs.$length()['$-'](1), y);
        y = self.$class().$new(self.prime, y);
      } else if (($a = ($c = y['$is_a?'](self.$class()), ($c === nil || $c === false))) !== false && $a !== nil) {
        self.$raise($scope.TypeError.$new("Can only multiply by polynomials"))
      } else if (($a = ($c = self.$prime()['$=='](y.$prime()), ($c === nil || $c === false))) !== false && $a !== nil) {
        self.$raise($scope.TypeError.$new("Polynomials must come from same prime field"))};
      if (((tmp = ($a = ($c = y.$coefficients()).$select, $a._p = (TMP_6 = function(c) {var self = TMP_6._s || this, $a;if (c == null) c = nil;
        return ($a = c['$=='](0), ($a === nil || $a === false))}, TMP_6._s = self, TMP_6), $a).call($c).$count()))['$<='](1)) {
        if (tmp['$=='](0)) {
          return self.$class().$new(self.$prime(), 0)};
        non_zero_index = 0;
        while (y.$coefficients()['$[]'](non_zero_index)['$=='](0)) {
        non_zero_index = non_zero_index['$+'](1)};
        multiplied_coeffs = ($a = ($d = self.$coefficients()).$map, $a._p = (TMP_7 = function(c) {var self = TMP_7._s || this;if (c == null) c = nil;
          return c['$*'](y.$coefficients()['$[]'](non_zero_index))}, TMP_7._s = self, TMP_7), $a).call($d);
        new_coefficients = multiplied_coeffs['$+']([0]['$*']((y.$degree()['$-'](non_zero_index))));
        return ($a = self.$class()).$new.apply($a, [self.$prime()].concat(new_coefficients));
        } else {
        poly = self.$class().$new(self.$prime(), 0);
        ($e = ($f = y.$coefficients()).$each_with_index, $e._p = (TMP_8 = function(coeff, index) {var self = TMP_8._s || this, $a;if (coeff == null) coeff = nil;if (index == null) index = nil;
          coeffs = [0]['$*']((y.$degree()['$+'](1)));
          coeffs['$[]='](index, coeff);
          return poly = poly['$+'](self['$*'](($a = self.$class()).$new.apply($a, [self.$prime()].concat(coeffs))));}, TMP_8._s = self, TMP_8), $e).call($f);
        poly['$simplify!']();
        return poly;
      };
    };

    def['$+'] = function(y) {
      var $a, TMP_9, $b, $c, TMP_10, self = this, coeffs = nil, deg = nil, coefficients1 = nil, coefficients2 = nil, coefficients = nil;
      if (($a = y['$is_a?']($scope.Integer)) !== false && $a !== nil) {
        coeffs = ($a = ($b = self.coefficients).$map, $a._p = (TMP_9 = function(c) {var self = TMP_9._s || this;if (c == null) c = nil;
          return 0}, TMP_9._s = self, TMP_9), $a).call($b);
        coeffs['$[]='](coeffs.$length()['$-'](1), y);
        y = self.$class().$new(self.prime, y);
      } else if (($a = ($c = y['$is_a?'](self.$class()), ($c === nil || $c === false))) !== false && $a !== nil) {
        return self;
        self.$raise($scope.TypeError.$new("Can only add polynomials"));
      } else if (($a = ($c = self.$prime()['$=='](y.$prime()), ($c === nil || $c === false))) !== false && $a !== nil) {
        self.$raise($scope.TypeError.$new("Polynomials must come from same prime field"))};
      deg = [self.$degree(), y.$degree()].$max();
      coefficients1 = ([0]['$*']((deg['$-'](self.$degree())))).$concat(self.$coefficients());
      coefficients2 = ([0]['$*']((deg['$-'](y.$degree())))).$concat(y.$coefficients());
      coefficients = ($a = ($c = coefficients1.$each_with_index()).$map, $a._p = (TMP_10 = function(c, i) {var self = TMP_10._s || this;if (c == null) c = nil;if (i == null) i = nil;
        return c['$+'](coefficients2['$[]'](i))}, TMP_10._s = self, TMP_10), $a).call($c);
      return ($a = self.$class()).$new.apply($a, [self.$prime()].concat(coefficients));
    };

    def['$-@'] = function() {
      var $a, TMP_11, $b, $c, self = this;
      return ($a = self.$class()).$new.apply($a, [self.$prime()].concat(($b = ($c = self.coefficients).$map, $b._p = (TMP_11 = function(coeff) {var self = TMP_11._s || this;if (coeff == null) coeff = nil;
        return coeff['$-@']()}, TMP_11._s = self, TMP_11), $b).call($c)));
    };

    def['$-'] = function(y) {
      var self = this;
      return self['$+']((y['$-@']()));
    };

    return (def['$=='] = function(y) {
      var self = this;
      return (self['$-'](y)).$coefficients()['$==']([0]);
    }, nil);
  })(self, null);
  (function($base, $super) {
    function FiniteField(){};
    var self = FiniteField = $klass($base, $super, 'FiniteField', FiniteField);

    var def = FiniteField._proto, $scope = FiniteField._scope;
    def.exponent = def.polynomial = def.all_elements = def.prime = nil;
    self.$attr_accessor("prime", "exponent", "degree", "polynomial", "default_poly");

    def.$initialize = function(p, n, poly) {
      var $a, $b, $c, self = this;
      if (poly == null) {
        poly = nil
      }
      self.prime = p;
      self.exponent = n;
      self.degree = p['$**'](n);
      if (($a = poly['$nil?']()) !== false && $a !== nil) {
        self.default_poly = true;
        self.$puts("Constructing irreducible polynomial...");
        self.polynomial = self.$construct_irreducible_polynomial();
        if (($a = ($b = (((($c = self.exponent['$=='](1)) !== false && $c !== nil) ? $c : self.polynomial)), ($b === nil || $b === false))) !== false && $a !== nil) {
          return self.$raise($scope.Exception.$new("No irreducible polynomial of degree " + (n) + " mod " + (p) + " found!"))
        } else if (($a = self.polynomial) !== false && $a !== nil) {
          self.$puts("Found " + (self.polynomial) + "...");
          return self.$puts("  You can now play with this field as it is realized inside F_" + (p) + "[X] / (" + (self.polynomial.$to_s(true)) + ")\n");
          } else {
          return self.polynomial = $scope.FiniteFieldPolynomial.$new(p, 1, 0)
        };
        } else {
        self.default_poly = false;
        if (($a = ($b = poly.$prime()['$=='](p), ($b === nil || $b === false))) !== false && $a !== nil) {
          self.$raise($scope.TypeError.$new("Passed polynomial must lie in same prime field"))
        } else if (($a = ($b = poly.$degree()['$=='](n), ($b === nil || $b === false))) !== false && $a !== nil) {
          self.$raise($scope.TypeError.$new("Passed polynomial must have correct degree: " + (n)))};
        return self.polynomial = poly;
      };
    };

    $opal.defs(self, '$inverse_in_prime_field', function(n, p) {try {

      var TMP_12, $a, $b, self = this;
      ($a = ($b = ($range(1, (p['$-'](1)), false))).$each, $a._p = (TMP_12 = function(x) {var self = TMP_12._s || this;if (x == null) x = nil;
        if ((x['$*'](n)['$%'](p))['$=='](1)) {
          $opal.$return(x)
          } else {
          return nil
        }}, TMP_12._s = self, TMP_12), $a).call($b);
      return nil;
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    });

    def.$to_s = function() {
      var self = this, deg = nil;
      deg = (function() {if (self.$exponent()['$>'](1)) {
        return "" + (self.$degree()) + " = " + (self.$prime()) + "^" + (self.$exponent())
        } else {
        return self.$degree()
      }; return nil; })();
      return (("Finite Field of degree ") + (deg))['$+'](((function() {if (self.$exponent()['$>'](1)) {
        return "represented by F_" + (self.$degree()) + "[x] / (" + (self.$polynomial().$to_s(true)) + ")"
        } else {
        return ""
      }; return nil; })()));
    };

    def.$multiplication_table = function(f) {
      var $a, TMP_13, $b, TMP_14, $c, TMP_15, $d, self = this, just_body = nil, mt_string = nil, output = nil, ffp_string = nil, finite_field_string = nil, filt = nil;
      if (f == null) {
        f = ((($a = $gvars["std_out"]) !== false && $a !== nil) ? $a : nil)
      }
      just_body = false;
      if (($a = f['$is_a?']($scope.String)) !== false && $a !== nil) {
        mt_string = "('" + (f) + "')";
        f = $scope.File.$open(f, "w");
      } else if (($a = f['$==='](false)) !== false && $a !== nil) {
        just_body = true
        } else {
        mt_string = ""
      };
      output = "";
      ffp_string = (function() {if (($a = self.$default_poly()) !== false && $a !== nil) {
        return ""
        } else {
        return (((((", ") + (self.$polynomial().$class().$to_s())) + ".new(") + (self.$prime())) + ",  ")['$+'](self.$polynomial().$coefficients().$to_s()['$[]']($range(1, self.$polynomial().$coefficients().$to_s().$length()['$-'](2), false)))
      }; return nil; })();
      finite_field_string = "" + (self.$class().$to_s()) + ".new(" + (self.$prime()) + ", " + (self.$exponent()) + (ffp_string) + ")";
      if (($a = just_body) === false || $a === nil) {
        output = output['$+']("      <html> <head> <style type=\"text/css\"> body {\n      padding: 1em; font-family: georgia; } table tr td {\n      padding: 0.25em; margin: 0; } table thead td {\n      border-bottom: 1px solid #000; } td:first-child {\n      border-right: 1px solid #000; } </style> </head> <body>\n")};
      output = output['$+']("      <h2 style=\"margin: 0;padding-bottom: 1em;\">Multiplication table for\n      F<sub>" + (self.$degree()) + "</sub> embedded in F<sub>" + (self.$prime()) + "</sub>[X] /\n      (" + (self.$polynomial().$to_string(true).$gsub(/\^([0-9]+)/, "<sup>\\1</sup>")) + ")</h2>\n      <h3 style=\"margin: 0;display: none;\">This was generated in Ruby using\n      <pre style=\"display: inline-block\">\n " + (finite_field_string) + ".multiplication_table" + (mt_string) + "</pre></h3>\n");
      output = output['$+']("<table><thead><tr><td> * </td>");
      filt = ($a = ($b = self).$lambda, $a._p = (TMP_13 = function(str) {var self = TMP_13._s || this;if (str == null) str = nil;
        return str.$gsub(/\^([0-9]+)/, "<sup>\\1</sup>")}, TMP_13._s = self, TMP_13), $a).call($b);
      ($a = ($c = self.$all_elements()).$each, $a._p = (TMP_14 = function(el) {var self = TMP_14._s || this;if (el == null) el = nil;
        return output = output['$+']("<td>" + (filt.$call(el.$to_string(true))) + "</td>")}, TMP_14._s = self, TMP_14), $a).call($c);
      output = output['$+']("</tr></thead><tbody>\n");
      ($a = ($d = self.$all_elements()).$each, $a._p = (TMP_15 = function(el) {var self = TMP_15._s || this, TMP_16, $a, $b;if (el == null) el = nil;
        output = output['$+']("<tr><td>" + (filt.$call(el.$to_string(true))) + "</td>");
        ($a = ($b = self.$all_elements()).$each, $a._p = (TMP_16 = function(el2) {var self = TMP_16._s || this;if (el2 == null) el2 = nil;
          return output = output['$+']("<td>" + (filt.$call((el['$*'](el2)).$to_string(true))) + "</td>")}, TMP_16._s = self, TMP_16), $a).call($b);
        return output = output['$+']("</tr>\n");}, TMP_15._s = self, TMP_15), $a).call($d);
      output = output['$+']("</tbody></table>"['$+'](((function() {if (just_body !== false && just_body !== nil) {
        return ""
        } else {
        return "</body></html>"
      }; return nil; })())));
      if (($a = f['$is_a?']($scope.IO)) !== false && $a !== nil) {
        f['$<<'](output)};
      if (($a = f['$is_a?']($scope.File)) !== false && $a !== nil) {
        f.$close()};
      if (($a = f['$is_a?']($scope.IO)) !== false && $a !== nil) {
        return f
        } else {
        return output
      };
    };

    self.$protected();

    def.$all_elements = function() {
      var $a, TMP_17, $b, self = this, list = nil, coeffs_list = nil;
      if (($a = self.all_elements) !== false && $a !== nil) {
        return self.all_elements};
      list = [];
      coeffs_list = ($range(1, (self.$degree()['$-'](1)), false));
      ($a = ($b = coeffs_list).$each, $a._p = (TMP_17 = function(coeff_encoding) {var self = TMP_17._s || this, $a, $b, $c, coeffs = nil;if (coeff_encoding == null) coeff_encoding = nil;
        coeffs = [];
        while (($b = ($c = coeff_encoding['$=='](0), ($c === nil || $c === false))) !== false && $b !== nil) {
        coeffs = coeffs['$+']([coeff_encoding['$%'](self.$prime())]);
        coeff_encoding = coeff_encoding['$/'](self.$prime());
        coeff_encoding = coeff_encoding.$floor();};
        coeffs = coeffs['$+']([0]['$*']((self.$exponent()['$-'](coeffs.$length())['$+'](1))));
        return list['$<<'](($a = $scope.FiniteFieldElement).$new.apply($a, [self].concat(coeffs.$reverse())));}, TMP_17._s = self, TMP_17), $a).call($b);
      return self.all_elements = list;
    };

    return (def.$construct_irreducible_polynomial = function() {try {

      var TMP_18, $a, $b, self = this;
      ($a = ($b = ($range(1, (self.prime['$-'](1)), false))).$each, $a._p = (TMP_18 = function(a_n) {var self = TMP_18._s || this, TMP_19, $a, $b, coeffs_list = nil;
        if (self.prime == null) self.prime = nil;
        if (self.exponent == null) self.exponent = nil;
if (a_n == null) a_n = nil;
        coeffs_list = ($range(self.prime['$**']((self.exponent['$-'](1)))['$+'](1), (self.prime['$**'](self.exponent)['$-'](1)), false));
        return ($a = ($b = coeffs_list).$each, $a._p = (TMP_19 = function(coeff_encoding) {var self = TMP_19._s || this, $a, $b, $c, coeffs = nil, poly = nil;
          if (self.prime == null) self.prime = nil;
          if (self.exponent == null) self.exponent = nil;
if (coeff_encoding == null) coeff_encoding = nil;
          coeffs = [a_n];
          while (($b = ($c = coeff_encoding['$=='](0), ($c === nil || $c === false))) !== false && $b !== nil) {
          coeffs = coeffs['$+']([coeff_encoding['$%'](self.prime)]);
          coeff_encoding = coeff_encoding['$/'](self.prime);
          coeff_encoding = coeff_encoding.$floor();};
          coeffs = coeffs['$+']([0]['$*']((self.exponent['$-'](coeffs.$length())['$+'](1))));
          poly = ($a = $scope.FiniteFieldPolynomial).$new.apply($a, [self.prime].concat(coeffs));
          if (($b = poly.$is_irreducible()) !== false && $b !== nil) {
            $opal.$return(poly)
            } else {
            return nil
          };}, TMP_19._s = self, TMP_19), $a).call($b);}, TMP_18._s = self, TMP_18), $a).call($b);
      return nil;
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    }, nil);
  })(self, null);
  (function($base, $super) {
    function FiniteFieldElement(){};
    var self = FiniteFieldElement = $klass($base, $super, 'FiniteFieldElement', FiniteFieldElement);

    var def = FiniteFieldElement._proto, $scope = FiniteFieldElement._scope, TMP_20, TMP_21, TMP_26;
    def.inverse_of_leading_coefficient = nil;
    self.$attr_accessor("finite_field", "coefficients");

    def.$initialize = TMP_20 = function(_finite_field, _coefficients) {
      var $a, $b, self = this, $iter = TMP_20._p, $yield = $iter || nil;
      _coefficients = $slice.call(arguments, 1);
      TMP_20._p = null;
      if (($a = ($b = _finite_field['$is_a?']($scope.Integer), $b !== false && $b !== nil ?_coefficients.$length()['$=='](1) : $b)) !== false && $a !== nil) {
        _finite_field = $scope.FiniteField.$new(_finite_field, _coefficients['$[]'](0));
        _coefficients = [];};
      if (_coefficients.$length()['$=='](0)) {
        if (_finite_field.$exponent()['$>'](1)) {
          _coefficients = [1, 0]
          } else {
          _coefficients = [1]
        }
      } else if (($a = _coefficients['$[]'](0)['$is_a?']($scope.FiniteFieldPolynomial)) !== false && $a !== nil) {
        _coefficients = _coefficients['$[]'](0).$coefficients()};
      self.finite_field = _finite_field;
      self.coefficients = _coefficients;
      return $opal.find_super_dispatcher(self, 'initialize', TMP_20, null).apply(self, [self.$finite_field().$prime()].concat(self.$coefficients()));
    };

    def['$simplify!'] = TMP_21 = function() {var $zuper = $slice.call(arguments, 0);
      var $a, TMP_22, $b, TMP_23, $c, self = this, $iter = TMP_21._p, $yield = $iter || nil, coeffs = nil, deg_diff = nil, new_coeffs = nil;
      TMP_21._p = null;
      $opal.find_super_dispatcher(self, 'simplify!', TMP_21, $iter).apply(self, $zuper);
      if (self.$finite_field().$exponent()['$=='](1)) {
        self['$coefficients=']([self.$coefficients().$last()['$%'](self.$prime())]);
        return self;
      } else if (self.$degree()['$>='](self.$finite_field().$exponent())) {
        coeffs = (self.$finite_field().$polynomial()['$-@']()).$coefficients()['$[]']($range(1, -1, false));
        ((($a = self.inverse_of_leading_coefficient) !== false && $a !== nil) ? $a : self.inverse_of_leading_coefficient = $scope.FiniteField.$inverse_in_prime_field(self.$finite_field().$polynomial().$coefficients()['$[]'](0), self.$finite_field().$prime()));
        coeffs = ($a = ($b = coeffs).$map, $a._p = (TMP_22 = function(c) {var self = TMP_22._s || this;
          if (self.inverse_of_leading_coefficient == null) self.inverse_of_leading_coefficient = nil;
if (c == null) c = nil;
          return c['$*'](self.inverse_of_leading_coefficient)['$%'](self.$finite_field().$prime())}, TMP_22._s = self, TMP_22), $a).call($b);
        deg_diff = (self.$degree()['$-'](self.$finite_field().$exponent()));
        new_coeffs = [0]['$*']((deg_diff['$+'](1)))['$+'](self.$coefficients()['$[]']($range((self.$finite_field().$exponent()['$-@']()), -1, false)));
        ($a = ($c = ($range(0, deg_diff, false))).$each, $a._p = (TMP_23 = function(i) {var self = TMP_23._s || this, $a, TMP_24, $b, extra_coeffs = nil;if (i == null) i = nil;
          extra_coeffs = coeffs['$+']([0]['$*']((deg_diff['$-'](i))));
          extra_coeffs = [0]['$*']((self.$degree()['$-']((extra_coeffs.$length()['$-'](1)))))['$+'](extra_coeffs);
          if (($a = new_coeffs.$length()['$=='](extra_coeffs.$length())) === false || $a === nil) {
            self.$raise("Coefficient lengths do not match")};
          return new_coeffs = ($a = ($b = new_coeffs.$each_with_index()).$map, $a._p = (TMP_24 = function(coeff, index) {var self = TMP_24._s || this;if (coeff == null) coeff = nil;if (index == null) index = nil;
            return coeff['$+'](extra_coeffs['$[]'](index)['$*'](self.$coefficients()['$[]'](i)))}, TMP_24._s = self, TMP_24), $a).call($b);}, TMP_23._s = self, TMP_23), $a).call($c);
        self['$coefficients='](new_coeffs);
        return self['$simplify!']();};
      return self;
    };

    def.$inverse = function() {try {

      var TMP_25, $a, $b, self = this, coeffs_list = nil;
      if (self.$degree()['$=='](0)) {
        return $scope.FiniteField.$inverse_in_prime_field(self.$coefficients()['$[]'](0), self.$finite_field().$prime())};
      coeffs_list = ($range(1, (self.$finite_field().$degree()['$-'](1)), false));
      ($a = ($b = coeffs_list).$each, $a._p = (TMP_25 = function(coeff_encoding) {var self = TMP_25._s || this, $a, $b, $c, coeffs = nil, poly = nil;if (coeff_encoding == null) coeff_encoding = nil;
        coeffs = [];
        while (($b = ($c = coeff_encoding['$=='](0), ($c === nil || $c === false))) !== false && $b !== nil) {
        coeffs = coeffs['$+']([coeff_encoding['$%'](self.$finite_field().$prime())]);
        coeff_encoding = coeff_encoding['$/'](self.$finite_field().$prime());
        coeff_encoding = coeff_encoding.$floor();};
        coeffs = coeffs['$+']([0]['$*']((self.$finite_field().$exponent()['$-'](coeffs.$length()))));
        poly = ($a = $scope.FiniteFieldElement).$new.apply($a, [self.$finite_field()].concat(coeffs));
        if (poly['$*'](self)['$=='](1)) {
          $opal.$return(poly)
          } else {
          return nil
        };}, TMP_25._s = self, TMP_25), $a).call($b);
      return nil;
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    };

    def['$*'] = function(y) {
      var self = this;
      y = self.$sanity_check(y);
      return self.$class().$new(self.$finite_field(), self.$to_ffp()['$*'](y.$to_ffp()));
    };

    def['$+'] = function(y) {
      var self = this;
      y = self.$sanity_check(y);
      return self.$class().$new(self.$finite_field(), self.$to_ffp()['$+'](y.$to_ffp()));
    };

    def['$-@'] = function() {
      var self = this;
      return self.$class().$new(self.$finite_field(), self.$to_ffp()['$-@']());
    };

    def['$-'] = function(y) {
      var self = this;
      return self['$+']((y['$-@']()));
    };

    def['$/'] = function(y) {
      var self = this;
      y = self.$sanity_check(y);
      if (y['$=='](0)) {
        self.$raise($scope.TypeError.$new("Cannot divide by 0"))};
      return self['$*'](y.$inverse());
    };

    def['$**'] = function(n) {
      var $a, self = this, initpoly = nil, poly = nil;
      if (($a = n['$is_a?']($scope.Integer)) === false || $a === nil) {
        self.$raise($scope.TypeError.$new("Can only raise to integral powers"))};
      if (n['$=='](0)) {
        return self.$class().$new(self.$finite_field(), 1)
        } else {
        if (n['$<'](0)) {
          initpoly = self.$inverse();
          n = n['$-@']();
          } else {
          initpoly = self.$dup()
        };
        poly = initpoly.$dup();
        while (n['$>'](1)) {
        poly = poly.$send("*", initpoly);
        n = n['$-'](1);};
        return poly;
      };
    };

    def['$^'] = function(n) {
      var self = this;
      return self.$raise("To multiply, use ** instead of ^, because Ruby operator "['$+']("priorities are weird"));
    };

    def.$to_ffp = function() {
      var $a, self = this;
      return ($a = $scope.FiniteFieldPolynomial).$new.apply($a, [self.$finite_field().$prime()].concat(self.$coefficients()));
    };

    def.$to_s = TMP_26 = function(raw) {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_26._p, $yield = $iter || nil;
      if (raw == null) {
        raw = true
      }
      TMP_26._p = null;
      return $opal.find_super_dispatcher(self, 'to_s', TMP_26, $iter).apply(self, $zuper)['$+'](((function() {if (raw !== false && raw !== nil) {
        return ""
        } else {
        return " embedded in " + (self.$finite_field())
      }; return nil; })()));
    };

    self.$protected();

    def.$sanity_check = function(y) {
      var $a, self = this;
      y = self.$integer_wrap(y);
      if (($a = y['$is_a?'](self.$class())) === false || $a === nil) {
        self.$raise($scope.TypeError.$new("Can only multiply finite field elements by themselves"))};
      if (($a = self.$finite_field().$degree()['$=='](y.$finite_field().$degree())) === false || $a === nil) {
        self.$raise($scope.TypeError.$new("Can only multiply finite field elements by themselves!"))};
      return y;
    };

    return (def.$integer_wrap = function(y) {
      var $a, self = this;
      if (($a = y['$is_a?']($scope.Integer)) !== false && $a !== nil) {
        return self.$class().$new(self.$finite_field(), y)
        } else {
        return y
      };
    }, nil);
  })(self, $scope.FiniteFieldPolynomial);
  return (function($base, $super) {
    function Fixnum(){};
    var self = Fixnum = $klass($base, $super, 'Fixnum', Fixnum);

    var def = Fixnum._proto, $scope = Fixnum._scope, $a, $b, $c, $d;
    if (($a = ($b = ($c = ($d = self['$method_defined?']("*_old__FiniteFieldPolynomialHack"), $d !== false && $d !== nil ?self['$method_defined?']("+_old__FiniteFieldPolynomialHack") : $d), $c !== false && $c !== nil ?self['$method_defined?']("-_old__FiniteFieldPolynomialHack") : $c), $b !== false && $b !== nil ?self['$method_defined?']("/_old__FiniteFieldPolynomialHack") : $b)) !== false && $a !== nil) {
      return nil
      } else {
      self.$alias_method("*_old__FiniteFieldPolynomialHack", "*");

      self.$alias_method("+_old__FiniteFieldPolynomialHack", "+");

      self.$alias_method("-_old__FiniteFieldPolynomialHack", "-");

      self.$alias_method("/_old__FiniteFieldPolynomialHack", "/");

      def['$-'] = function(y) {
        var $a, self = this;
        if (($a = y['$is_a?']($scope.FiniteFieldElement)) !== false && $a !== nil) {
          return $scope.FiniteFieldElement.$new(y.$finite_field(), self['$-@']())['$-'](y)
        } else if (($a = y['$is_a?']($scope.FiniteFieldPolynomial)) !== false && $a !== nil) {
          return $scope.FiniteFieldPolynomial.$new(y.$prime(), self['$-@']())['$-'](y)};
        return self.$send("-_old__FiniteFieldPolynomialHack", y);
      };

      def['$/'] = function(y) {
        var $a, self = this;
        if (($a = y['$is_a?']($scope.FiniteFieldElement)) !== false && $a !== nil) {
          return $scope.FiniteFieldElement.$new(y.$finite_field(), self)['$/'](y)};
        return self.$send("/_old__FiniteFieldPolynomialHack", y);
      };

      def['$+'] = function(y) {
        var $a, $b, self = this;
        if (($a = ((($b = y['$is_a?']($scope.FiniteFieldPolynomial)) !== false && $b !== nil) ? $b : y['$is_a?']($scope.FiniteFieldElement))) !== false && $a !== nil) {
          return y['$+'](self)};
        return self.$send("+_old__FiniteFieldPolynomialHack", y);
      };

      return (def['$*'] = function(y) {
        var $a, $b, self = this;
        if (($a = ((($b = y['$is_a?']($scope.FiniteFieldPolynomial)) !== false && $b !== nil) ? $b : y['$is_a?']($scope.FiniteFieldElement))) !== false && $a !== nil) {
          return y['$*'](self)};
        return self.$send("*_old__FiniteFieldPolynomialHack", y);
      }, nil);
    }
  })(self, null);
})(Opal);
